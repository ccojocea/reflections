What happens when you initialize a repository? Why do you need to do it?

	A hidden folder named .git is created to contain the git repository. No commits are added to it.
	
How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area is a step between the working directory and the repository. Its value is that you don't have to 
	commit the entire working directory to the repository, and you can choose what goes into it.
	
How can you use the staging area to make sure you have one commit per logical change?

	As soon as you believe that the change you made is complete, for example you finished fixing a bug, or added a 
	good part of information, etc, you should probably commit the change.
	
What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	As seen in the video, creating different language implementations, demos, adding a new feature that you're not sure about yet
	
How do the diagrams help you visualize the branch structure?

	Definitely easier to follow on a tree like structure diagram than just by running a git log.
	
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	The result is a new branch containing changes made from both branches.
	
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	Always manually merging, even when we're talking about thousands of lines of code shouldn't even be considered in my opinion, 
	as long as tools exist to automatically merge all the code that is safe to merge, only highlighting conflicts as explained in the lesson.
	I don't know how fool proof the system is, but I believe the pros should outweight any cons in this case.